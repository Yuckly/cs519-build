{"ast":null,"code":"var _jsxFileName = \"/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport Box from \"@mui/material/Box\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"studentID\",\n  headerName: \"Student ID\"\n}, {\n  field: \"studentName\",\n  headerName: \"Student Name\",\n  width: 150\n}, {\n  field: \"classID\",\n  headerName: \"Class ID\"\n}, {\n  field: \"className\",\n  headerName: \"Class Name\"\n}, {\n  field: \"semester\",\n  headerName: \"Semester\"\n}, {\n  field: \"finalGrade\",\n  headerName: \"Final Grade\"\n}];\nexport const Test = _ref => {\n  _s();\n  let {\n    studentDetails,\n    classTitleId,\n    classAssignments\n  } = _ref;\n  console.log(classAssignments);\n  const [grade, setGrade] = useState([]);\n  const fetchGrades = async (studentId, classId) => {\n    try {\n      const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      if (!res.ok) {\n        throw new Error(`Error: ${res.status}`);\n      }\n      const grade = await res.json();\n      return grade;\n    } catch (error) {\n      console.error(\"Failed to fetch student grade:\", error);\n    }\n  };\n\n  // useEffect(() => {\n  //   const fetchAndSetGrades = async () => {\n  //     const grades = await Promise.all(\n  //       studentDetails.map((student) => fetchGrades(student.universityId, classTitleId[1]))\n  //     );\n  //     setGrade(grades);\n  //   };\n\n  //   fetchAndSetGrades();\n  // }, [studentDetails, classTitleId]);\n  const assignmentNumbers = classAssignments.length;\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map(async (student, index) => {\n    const studentId = student.universityId;\n    let finalGrade = \"Unknown\";\n    try {\n      const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      if (res.ok) {\n        const grade = await res.json();\n        finalGrade = grade.grades[\"A1\"];\n      } else {\n        console.error(`Error fetching grade for student ${studentId}: ${res.status}`);\n      }\n    } catch (error) {\n      console.error(`Failed to fetch student grade for student ${studentId}:`, error);\n    }\n    return {\n      id: index,\n      studentID: studentId,\n      studentName: student.name,\n      classID: classId,\n      className: classTitle,\n      semester: \"fall2022\",\n      finalGrade: finalGrade\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Test, \"GtyHTkUmPAc1OclgWkftN6t2DGM=\");\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["Box","DataGrid","MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","useState","columns","field","headerName","width","Test","studentDetails","classTitleId","classAssignments","console","log","grade","setGrade","fetchGrades","studentId","classId","res","fetch","method","headers","ok","Error","status","json","error","assignmentNumbers","length","classTitle","rows","map","student","index","universityId","finalGrade","grades","id","studentID","studentName","name","classID","className","semester","height"],"sources":["/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { IUniversityClass,IStudentDetail,IClassAssignment,IStudentGrade } from \"../types/api_types\";\nimport { useState, useEffect } from \"react\"; \n\ninterface TestProps {\n  studentDetails: IStudentDetail[];\n  classTitleId: string[];\n  classAssignments: IClassAssignment[];\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: \"studentID\",\n    headerName: \"Student ID\",\n  },\n  {\n    field: \"studentName\",\n    headerName: \"Student Name\",\n    width: 150,\n  },\n  {\n    field: \"classID\",\n    headerName: \"Class ID\",\n  },\n  {\n    field: \"className\",\n    headerName: \"Class Name\",\n  },\n  {\n    field: \"semester\",\n    headerName: \"Semester\",\n  },\n  {\n    field: \"finalGrade\",\n    headerName: \"Final Grade\",\n  },\n];\n\nexport const Test = ({ studentDetails, classTitleId, classAssignments }: TestProps) => {\n  console.log(classAssignments);\n  const [grade, setGrade] = useState<IStudentGrade[]>([]);\n\n  const fetchGrades = async (studentId:string, classId:string) => {\n    try {\n      const res = await fetch(\n        `${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`,\n        {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS(),\n        }\n      );\n      if (!res.ok) {\n        throw new Error(`Error: ${res.status}`);\n      }\n      const grade = await res.json();\n      return grade;\n    } catch (error) {\n      console.error(\"Failed to fetch student grade:\", error);\n    }\n  };\n\n  // useEffect(() => {\n  //   const fetchAndSetGrades = async () => {\n  //     const grades = await Promise.all(\n  //       studentDetails.map((student) => fetchGrades(student.universityId, classTitleId[1]))\n  //     );\n  //     setGrade(grades);\n  //   };\n\n  //   fetchAndSetGrades();\n  // }, [studentDetails, classTitleId]);\n  const assignmentNumbers = classAssignments.length;\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map(async (student, index) => {\n    const studentId = student.universityId;\n    let finalGrade = \"Unknown\";\n\n    try {\n      const res = await fetch(\n        `${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`,\n        {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS(),\n        }\n      );\n      if (res.ok) {\n        const grade = await res.json();\n        finalGrade = grade.grades[\"A1\"];\n      } else {\n        console.error(`Error fetching grade for student ${studentId}: ${res.status}`);\n      }\n    } catch (error) {\n      console.error(`Failed to fetch student grade for student ${studentId}:`, error);\n    }\n\n    return {\n      id: index,\n      studentID: studentId,\n      studentName: student.name,\n      classID: classId,\n      className: classTitle,\n      semester: \"fall2022\",\n      finalGrade: finalGrade,\n    };\n  });\n  return (\n    <Box sx={{ height: 400, width: \"100%\" }}>\n      <DataGrid rows={rows} columns={columns} pageSize={10} />\n    </Box>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}