{"ast":null,"code":"var _jsxFileName = \"/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx\";\nimport React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"studentID\",\n  headerName: \"Student ID\"\n}, {\n  field: \"studentName\",\n  headerName: \"Student Name\",\n  width: 150\n}, {\n  field: \"classID\",\n  headerName: \"Class ID\"\n}, {\n  field: \"className\",\n  headerName: \"Class Name\"\n}, {\n  field: \"semester\",\n  headerName: \"Semester\"\n}, {\n  field: \"finalGrade\",\n  headerName: \"Final Grade\"\n}];\nexport const Test = _ref => {\n  let {\n    studentDetails,\n    classTitleId\n  } = _ref;\n  //   if (studentDetails.length > 0 && Array.isArray(studentDetails[0])) {\n  //     const firstStudent = studentDetails[0][0];\n  //     if (firstStudent) {\n  //         console.log(\"First student object:\", firstStudent);\n  //         if ('name' in firstStudent) {\n  //             console.log(\"Name of the first student:\", firstStudent.name, firstStudent.universityId);\n  //         } else {\n  //             console.log(\"Name property does not exist in the first student object\");\n  //         }\n  //     } else {\n  //         console.log(\"First element of studentDetails is empty\");\n  //     }\n  // } else {\n  //     console.log(\"studentDetails is empty or not structured as expected\");\n  // }\n\n  console.log(studentDetails);\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => ({\n    id: index,\n    studentID: student,\n    studentName: student.name,\n    classID: classId,\n    className: classTitle,\n    semester: \"fall2022\",\n    finalGrade: \"Unknown\"\n  }));\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","Box","DataGrid","columns","field","headerName","width","Test","studentDetails","classTitleId","console","log","classTitle","classId","rows","map","student","index","id","studentID","studentName","name","classID","className","semester","finalGrade","height"],"sources":["/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { IStudentDetail } from \"../types/api_types\";\n\ninterface TestProps {\n  studentDetails: IStudentDetail[];\n  classTitleId: string[];\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: \"studentID\",\n    headerName: \"Student ID\",\n  },\n  {\n    field: \"studentName\",\n    headerName: \"Student Name\",\n    width: 150,\n  },\n  {\n    field: \"classID\",\n    headerName: \"Class ID\",\n  },\n  {\n    field: \"className\",\n    headerName: \"Class Name\",\n  },\n  {\n    field: \"semester\",\n    headerName: \"Semester\",\n  },\n  {\n    field: \"finalGrade\",\n    headerName: \"Final Grade\",\n  },\n];\n\nexport const Test = ({ studentDetails,classTitleId }: TestProps) => {\n\n//   if (studentDetails.length > 0 && Array.isArray(studentDetails[0])) {\n//     const firstStudent = studentDetails[0][0];\n//     if (firstStudent) {\n//         console.log(\"First student object:\", firstStudent);\n//         if ('name' in firstStudent) {\n//             console.log(\"Name of the first student:\", firstStudent.name, firstStudent.universityId);\n//         } else {\n//             console.log(\"Name property does not exist in the first student object\");\n//         }\n//     } else {\n//         console.log(\"First element of studentDetails is empty\");\n//     }\n// } else {\n//     console.log(\"studentDetails is empty or not structured as expected\");\n// }\n\nconsole.log(studentDetails);\n\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => ({\n    id: index,\n    studentID: student,\n    studentName: student.name,\n    classID: classId,\n    className: classTitle,\n    semester: \"fall2022\",\n    finalGrade: \"Unknown\",\n  }));\n  return (\n    <Box sx={{ height: 400, width: \"100%\" }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n      />\n    </Box>\n  );\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAOC,GAAG,MAAM,mBAAmB;AACnC,SAASC,QAAQ,QAAoB,kBAAkB;AAAC;AASxD,MAAMC,OAAqB,GAAG,CAC5B;EACEC,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,aAAa;EACpBC,UAAU,EAAE,cAAc;EAC1BC,KAAK,EAAE;AACT,CAAC,EACD;EACEF,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,UAAU;EACjBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,YAAY;EACnBC,UAAU,EAAE;AACd,CAAC,CACF;AAED,OAAO,MAAME,IAAI,GAAG,QAAgD;EAAA,IAA/C;IAAEC,cAAc;IAACC;EAAwB,CAAC;EAE/D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;EAEzB,MAAMI,UAAU,GAAGH,YAAY,CAAC,CAAC,CAAC;EAClC,MAAMI,OAAO,GAAGJ,YAAY,CAAC,CAAC,CAAC;EAC/B,MAAMK,IAAI,GAAGN,cAAc,CAACO,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,MAAM;IACnDC,EAAE,EAAED,KAAK;IACTE,SAAS,EAAEH,OAAO;IAClBI,WAAW,EAAEJ,OAAO,CAACK,IAAI;IACzBC,OAAO,EAAET,OAAO;IAChBU,SAAS,EAAEX,UAAU;IACrBY,QAAQ,EAAE,UAAU;IACpBC,UAAU,EAAE;EACd,CAAC,CAAC,CAAC;EACH,oBACE,QAAC,GAAG;IAAC,EAAE,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEpB,KAAK,EAAE;IAAO,CAAE;IAAA,uBACtC,QAAC,QAAQ;MACP,IAAI,EAAEQ,IAAK;MACX,OAAO,EAAEX,OAAQ;MACjB,QAAQ,EAAE;IAAE;MAAA;MAAA;MAAA;IAAA;EACZ;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAxCWI,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}