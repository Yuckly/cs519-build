{"ast":null,"code":"var _jsxFileName = \"/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"studentID\",\n  headerName: \"Student ID\"\n}, {\n  field: \"studentName\",\n  headerName: \"Student Name\",\n  width: 150\n}, {\n  field: \"classID\",\n  headerName: \"Class ID\"\n}, {\n  field: \"className\",\n  headerName: \"Class Name\"\n}, {\n  field: \"semester\",\n  headerName: \"Semester\"\n}, {\n  field: \"finalGrade\",\n  headerName: \"Final Grade\"\n}];\nexport const Test = _ref => {\n  _s();\n  let {\n    selectedClassId\n  } = _ref;\n  const [studentList, setStudentList] = useState([]);\n  useEffect(() => {\n    if (selectedClassId && selectedClassId[0]) {\n      fetchStudents(selectedClassId[0]);\n    }\n  }, [selectedClassId]);\n  const fetchStudents = async classId => {\n    try {\n      const response = await fetch(`${BASE_API_URL}/class/listStudents/${classId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const studentsData = await response.json();\n      setStudentList(studentsData);\n    } catch (error) {\n      console.error(\"Failed to fetch students enrolled in class:\", error);\n    }\n  };\n  const fetchStudentInformation = async studentId => {\n    try {\n      const response = await fetch(`${BASE_API_URL}/student/GetById/${studentId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const studentInformation = await response.json();\n    } catch (error) {\n      console.error(\"Failed to fetch students enrolled in class:\", error);\n    }\n  };\n  const [row, setRow] = useState();\n  let className,\n    classID = selectedClassId;\n  console.log(className, classID);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: [{\n        id: 1,\n        studentID: \"a\",\n        studentName: \"a\",\n        classID: \"a\",\n        className: \"a\",\n        semester: \"fall2022\",\n        finalGrade: \"a\"\n      }],\n      columns: columns,\n      pageSize: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Test, \"ssl6suY7IYL2jnY9+zhuwYmVvaw=\");\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useEffect","useState","Box","DataGrid","MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","columns","field","headerName","width","Test","selectedClassId","studentList","setStudentList","fetchStudents","classId","response","fetch","method","headers","ok","Error","status","studentsData","json","error","console","fetchStudentInformation","studentId","studentInformation","row","setRow","className","classID","log","height","id","studentID","studentName","semester","finalGrade"],"sources":["/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\ninterface TestProps {\n  selectedClassId: string[];\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: \"studentID\",\n    headerName: \"Student ID\",\n  },\n  {\n    field: \"studentName\",\n    headerName: \"Student Name\",\n    width: 150,\n  },\n  {\n    field: \"classID\",\n    headerName: \"Class ID\",\n  },\n  {\n    field: \"className\",\n    headerName: \"Class Name\",\n  },\n  {\n    field: \"semester\",\n    headerName: \"Semester\",\n  },\n  {\n    field: \"finalGrade\",\n    headerName: \"Final Grade\",\n  },\n];\n\nexport const Test = ({ selectedClassId }: TestProps) => {\n  const [studentList, setStudentList] = useState([]);\n\n  useEffect(() => {\n    if (selectedClassId && selectedClassId[0]) {\n      fetchStudents(selectedClassId[0]);\n    }\n  }, [selectedClassId]);\n  \n  const fetchStudents = async (classId: string) => {\n    try {\n      const response = await fetch(\n        `${BASE_API_URL}/class/listStudents/${classId}?buid=${MY_BU_ID}`,\n        {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS(),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const studentsData = await response.json();\n      setStudentList(studentsData);\n    } catch (error) {\n      console.error(\"Failed to fetch students enrolled in class:\", error);\n    }\n  };\n\n\n  const fetchStudentInformation = async (studentId: string) => {\n    try {\n      const response = await fetch(\n        `${BASE_API_URL}/student/GetById/${studentId}?buid=${MY_BU_ID}`,\n        {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS(),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const studentInformation = await response.json();\n      \n    } catch (error) {\n      console.error(\"Failed to fetch students enrolled in class:\", error);\n    }\n  }\n\n  const [row, setRow] = useState();\n  let className,\n    classID = selectedClassId;\n  console.log(className, classID);\n  return (\n    <Box sx={{ height: 400, width: \"100%\" }}>\n      <DataGrid\n        rows={[\n          {\n            id: 1,\n            studentID: \"a\",\n            studentName: \"a\",\n            classID: \"a\",\n            className: \"a\",\n            semester: \"fall2022\",\n            finalGrade: \"a\",\n          },\n        ]}\n        columns={columns}\n        pageSize={5}\n      />\n    </Box>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,mBAAmB;AACnC,SAASC,QAAQ,QAAoB,kBAAkB;AACvD,SAASC,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,YAAY;AAAC;AAMzE,MAAMC,OAAqB,GAAG,CAC5B;EACEC,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,aAAa;EACpBC,UAAU,EAAE,cAAc;EAC1BC,KAAK,EAAE;AACT,CAAC,EACD;EACEF,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,UAAU;EACjBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,YAAY;EACnBC,UAAU,EAAE;AACd,CAAC,CACF;AAED,OAAO,MAAME,IAAI,GAAG,QAAoC;EAAA;EAAA,IAAnC;IAAEC;EAA2B,CAAC;EACjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,IAAIY,eAAe,IAAIA,eAAe,CAAC,CAAC,CAAC,EAAE;MACzCG,aAAa,CAACH,eAAe,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAMG,aAAa,GAAG,MAAOC,OAAe,IAAK;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEb,YAAa,uBAAsBW,OAAQ,SAAQZ,QAAS,EAAC,EAChE;QACEe,MAAM,EAAE,KAAK;QACbC,OAAO,EAAEd,mBAAmB;MAC9B,CAAC,CACF;MACD,IAAI,CAACW,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,UAASL,QAAQ,CAACM,MAAO,EAAC,CAAC;MAC9C;MACA,MAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAC1CX,cAAc,CAACU,YAAY,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAGD,MAAME,uBAAuB,GAAG,MAAOC,SAAiB,IAAK;IAC3D,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEb,YAAa,oBAAmBwB,SAAU,SAAQzB,QAAS,EAAC,EAC/D;QACEe,MAAM,EAAE,KAAK;QACbC,OAAO,EAAEd,mBAAmB;MAC9B,CAAC,CACF;MACD,IAAI,CAACW,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,UAASL,QAAQ,CAACM,MAAO,EAAC,CAAC;MAC9C;MACA,MAAMO,kBAAkB,GAAG,MAAMb,QAAQ,CAACQ,IAAI,EAAE;IAElD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAED,MAAM,CAACK,GAAG,EAAEC,MAAM,CAAC,GAAG/B,QAAQ,EAAE;EAChC,IAAIgC,SAAS;IACXC,OAAO,GAAGtB,eAAe;EAC3Be,OAAO,CAACQ,GAAG,CAACF,SAAS,EAAEC,OAAO,CAAC;EAC/B,oBACE,QAAC,GAAG;IAAC,EAAE,EAAE;MAAEE,MAAM,EAAE,GAAG;MAAE1B,KAAK,EAAE;IAAO,CAAE;IAAA,uBACtC,QAAC,QAAQ;MACP,IAAI,EAAE,CACJ;QACE2B,EAAE,EAAE,CAAC;QACLC,SAAS,EAAE,GAAG;QACdC,WAAW,EAAE,GAAG;QAChBL,OAAO,EAAE,GAAG;QACZD,SAAS,EAAE,GAAG;QACdO,QAAQ,EAAE,UAAU;QACpBC,UAAU,EAAE;MACd,CAAC,CACD;MACF,OAAO,EAAElC,OAAQ;MACjB,QAAQ,EAAE;IAAE;MAAA;MAAA;MAAA;IAAA;EACZ;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAvEWI,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}