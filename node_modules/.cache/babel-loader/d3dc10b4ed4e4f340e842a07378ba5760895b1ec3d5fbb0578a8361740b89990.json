{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => {\n  var _props$unstable_cellS, _props$initialState;\n  return _extends({}, state, {\n    cellSelection: _extends({}, (_props$unstable_cellS = props.unstable_cellSelectionModel) != null ? _props$unstable_cellS : (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.cellSelection)\n  });\n};\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.unstable_cellSelectionModel,\n    propOnChange: props.unstable_onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => function () {\n    if (props.unstable_cellSelection) {\n      callback(...arguments);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.unstable_cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.unstable_cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.unstable_cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.unstable_cellSelection]);\n  const selectCellRange = React.useCallback(function (start, end) {\n    let keepOtherSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.unstable_getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.unstable_setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.unstable_getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, _ref) => {\n      let [id, fields] = _ref;\n      return [...acc, ...Object.entries(fields).reduce((acc2, _ref2) => {\n        let [field, isSelected] = _ref2;\n        return isSelected ? [...acc2, {\n          id: idToIdLookup[id],\n          field\n        }] : acc2;\n      }, [])];\n    }, []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    unstable_isCellSelected: isCellSelected,\n    unstable_getCellSelectionModel: getCellSelectionModel,\n    unstable_setCellSelectionModel: setCellSelectionModel,\n    unstable_selectCellRange: selectCellRange,\n    unstable_getSelectedCellsAsArray: getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = useEventCallback(() => {\n    var _apiRef$current$rootE;\n    lastMouseDownCell.current = null;\n    (_apiRef$current$rootE = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE = _apiRef$current$rootE.current) == null || _apiRef$current$rootE.classList.remove(gridClasses['root--disableUserSelection']);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    var _apiRef$current$rootE2, _apiRef$current$rootE3;\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE2 = _apiRef$current$rootE2.current) == null || _apiRef$current$rootE2.classList.add(gridClasses['root--disableUserSelection']);\n    const document = ownerDocument((_apiRef$current$rootE3 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE3.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    var _apiRef$current$virtu, _apiRef$current$virtu2;\n    if (autoScrollRAF.current) {\n      return;\n    }\n    if (!((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current)) {\n      return;\n    }\n    const virtualScrollerRect = (_apiRef$current$virtu2 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu2 = _apiRef$current$virtu2.current) == null ? void 0 : _apiRef$current$virtu2.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    function autoScroll() {\n      var _apiRef$current$virtu3;\n      if (!mousePosition.current || !((_apiRef$current$virtu3 = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu3.current)) {\n        return;\n      }\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = virtualScrollerRect;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n      const dimensions = apiRef.current.getRootDimensions();\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n    autoScroll();\n  }, [apiRef]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    var _apiRef$current$virtu4;\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = (_apiRef$current$virtu4 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu4 = _apiRef$current$virtu4.current) == null ? void 0 : _apiRef$current$virtu4.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    const {\n      height,\n      width,\n      x,\n      y\n    } = virtualScrollerRect;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.unstable_selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.unstable_getCellSelectionModel();\n      apiRef.current.unstable_setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.unstable_isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.unstable_setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.unstable_setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.unstable_cellSelectionModel) {\n      apiRef.current.unstable_setCellSelectionModel(props.unstable_cellSelectionModel);\n    }\n  }, [apiRef, props.unstable_cellSelectionModel]);\n  React.useEffect(() => {\n    var _apiRef$current$rootE4;\n    const rootRef = (_apiRef$current$rootE4 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE4.current;\n    return () => {\n      stopAutoScroll();\n      const document = ownerDocument(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, _ref3) => {\n    let {\n      id,\n      field\n    } = _ref3;\n    return apiRef.current.unstable_isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, _ref4) => {\n    let {\n      id,\n      field\n    } = _ref4;\n    const newClasses = [...classes];\n    if (!visibleRows.range || !apiRef.current.unstable_isCellSelected(id, field)) {\n      return classes;\n    }\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, _ref5) => {\n    let {\n      event,\n      cell\n    } = _ref5;\n    if (!cell || !props.unstable_cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.unstable_cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.unstable_getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n    const copyData = Object.keys(cellSelectionModel).reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            delimiterCharacter: clipboardCopyCellDelimiter,\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useEventCallback","isNavigationKey","serializeCellValue","useGridRegisterPipeProcessor","useGridVisibleRows","useGridApiEventHandler","useGridApiMethod","GRID_ACTIONS_COLUMN_TYPE","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridRowsDataRowIdToIdLookupSelector","gridClasses","gridFocusCellSelector","gridCellSelectionStateSelector","cellSelectionStateInitializer","state","props","_props$unstable_cellS","_props$initialState","cellSelection","unstable_cellSelectionModel","initialState","isKeyboardEvent","event","key","AUTO_SCROLL_SENSITIVITY","AUTO_SCROLL_SPEED","useGridCellSelection","apiRef","visibleRows","cellWithVirtualFocus","useRef","lastMouseDownCell","mousePosition","autoScrollRAF","ignoreValueFormatterProp","unstable_ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","current","registerControlState","stateId","propModel","propOnChange","unstable_onCellSelectionModelChange","stateSelector","changeEvent","runIfCellSelectionIsEnabled","callback","unstable_cellSelection","isCellSelected","useCallback","id","field","cellSelectionModel","getCellSelectionModel","setCellSelectionModel","newModel","setState","prevState","forceUpdate","selectCellRange","start","end","keepOtherSelected","startRowIndex","getRowIndexRelativeToVisibleRows","startColumnIndex","getColumnIndex","endRowIndex","endColumnIndex","finalStartRowIndex","finalStartColumnIndex","finalEndRowIndex","finalEndColumnIndex","visibleColumns","getVisibleColumns","rowsInRange","rows","slice","columnsInRange","unstable_getCellSelectionModel","forEach","row","column","unstable_setCellSelectionModel","getSelectedCellsAsArray","model","idToIdLookup","Object","entries","reduce","acc","fields","acc2","isSelected","cellSelectionApi","unstable_isCellSelected","unstable_selectCellRange","unstable_getSelectedCellsAsArray","hasClickedValidCellForRangeSelection","params","getColumn","type","rowNode","handleMouseUp","_apiRef$current$rootE","rootElementRef","classList","remove","stopAutoScroll","handleCellMouseDown","_apiRef$current$rootE2","_apiRef$current$rootE3","isMacOs","window","navigator","platform","toUpperCase","indexOf","button","ctrlKey","focusedCell","shiftKey","preventDefault","add","document","addEventListener","once","cancelAnimationFrame","handleCellFocusIn","startAutoScroll","_apiRef$current$virtu","_apiRef$current$virtu2","virtualScrollerRef","virtualScrollerRect","getBoundingClientRect","autoScroll","_apiRef$current$virtu3","x","mouseX","y","mouseY","height","width","deltaX","deltaY","factor","dimensions","getRootDimensions","hasScrollY","hasScrollX","scrollLeft","scrollTop","scroll","top","left","requestAnimationFrame","handleCellMouseOver","_apiRef$current$virtu4","metaKey","clientX","clientY","hasEnteredVerticalSensitivityArea","hasEnteredHorizontalSensitivityArea","hasEnteredSensitivityArea","handleCellClick","prevModel","handleCellKeyDown","otherCell","length","scrollToIndexes","rowIndex","colIndex","useEffect","_apiRef$current$rootE4","rootRef","removeEventListener","checkIfCellIsSelected","addClassesToCells","classes","newClasses","range","columnIndex","previousRowId","push","firstRowIndex","lastRowIndex","nextRowId","previousColumnField","nextColumnField","canUpdateFocus","initialValue","cell","handleClipboardCopy","value","copyData","keys","rowId","fieldsMap","rowString","cellData","cellParams","getCellParams","delimiterCharacter","join"],"sources":["/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/node_modules/@mui/x-data-grid-premium/hooks/features/cellSelection/useGridCellSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => {\n  var _props$unstable_cellS, _props$initialState;\n  return _extends({}, state, {\n    cellSelection: _extends({}, (_props$unstable_cellS = props.unstable_cellSelectionModel) != null ? _props$unstable_cellS : (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.cellSelection)\n  });\n};\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.unstable_cellSelectionModel,\n    propOnChange: props.unstable_onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => (...args) => {\n    if (props.unstable_cellSelection) {\n      callback(...args);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.unstable_cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.unstable_cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.unstable_cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.unstable_cellSelection]);\n  const selectCellRange = React.useCallback((start, end, keepOtherSelected = false) => {\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.unstable_getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.unstable_setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.unstable_getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {\n      return isSelected ? [...acc2, {\n        id: idToIdLookup[id],\n        field\n      }] : acc2;\n    }, [])], []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    unstable_isCellSelected: isCellSelected,\n    unstable_getCellSelectionModel: getCellSelectionModel,\n    unstable_setCellSelectionModel: setCellSelectionModel,\n    unstable_selectCellRange: selectCellRange,\n    unstable_getSelectedCellsAsArray: getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = useEventCallback(() => {\n    var _apiRef$current$rootE;\n    lastMouseDownCell.current = null;\n    (_apiRef$current$rootE = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE = _apiRef$current$rootE.current) == null || _apiRef$current$rootE.classList.remove(gridClasses['root--disableUserSelection']);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    var _apiRef$current$rootE2, _apiRef$current$rootE3;\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE2 = _apiRef$current$rootE2.current) == null || _apiRef$current$rootE2.classList.add(gridClasses['root--disableUserSelection']);\n    const document = ownerDocument((_apiRef$current$rootE3 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE3.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    var _apiRef$current$virtu, _apiRef$current$virtu2;\n    if (autoScrollRAF.current) {\n      return;\n    }\n    if (!((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current)) {\n      return;\n    }\n    const virtualScrollerRect = (_apiRef$current$virtu2 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu2 = _apiRef$current$virtu2.current) == null ? void 0 : _apiRef$current$virtu2.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    function autoScroll() {\n      var _apiRef$current$virtu3;\n      if (!mousePosition.current || !((_apiRef$current$virtu3 = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu3.current)) {\n        return;\n      }\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = virtualScrollerRect;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n      const dimensions = apiRef.current.getRootDimensions();\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n    autoScroll();\n  }, [apiRef]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    var _apiRef$current$virtu4;\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = (_apiRef$current$virtu4 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu4 = _apiRef$current$virtu4.current) == null ? void 0 : _apiRef$current$virtu4.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    const {\n      height,\n      width,\n      x,\n      y\n    } = virtualScrollerRect;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.unstable_selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.unstable_getCellSelectionModel();\n      apiRef.current.unstable_setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.unstable_isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.unstable_setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.unstable_setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.unstable_cellSelectionModel) {\n      apiRef.current.unstable_setCellSelectionModel(props.unstable_cellSelectionModel);\n    }\n  }, [apiRef, props.unstable_cellSelectionModel]);\n  React.useEffect(() => {\n    var _apiRef$current$rootE4;\n    const rootRef = (_apiRef$current$rootE4 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE4.current;\n    return () => {\n      stopAutoScroll();\n      const document = ownerDocument(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, {\n    id,\n    field\n  }) => {\n    return apiRef.current.unstable_isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, {\n    id,\n    field\n  }) => {\n    const newClasses = [...classes];\n    if (!visibleRows.range || !apiRef.current.unstable_isCellSelected(id, field)) {\n      return classes;\n    }\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, {\n    event,\n    cell\n  }) => {\n    if (!cell || !props.unstable_cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.unstable_cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.unstable_getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n    const copyData = Object.keys(cellSelectionModel).reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            delimiterCharacter: clipboardCopyCellDelimiter,\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}