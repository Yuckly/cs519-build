{"ast":null,"code":"var _jsxFileName = \"/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport Box from \"@mui/material/Box\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"studentID\",\n  headerName: \"Student ID\"\n}, {\n  field: \"studentName\",\n  headerName: \"Student Name\",\n  width: 150\n}, {\n  field: \"classID\",\n  headerName: \"Class ID\"\n}, {\n  field: \"className\",\n  headerName: \"Class Name\"\n}, {\n  field: \"semester\",\n  headerName: \"Semester\"\n}, {\n  field: \"finalGrade\",\n  headerName: \"Final Grade\"\n}];\nexport const Test = _ref => {\n  _s();\n  let {\n    studentDetails,\n    classTitleId,\n    classAssignments\n  } = _ref;\n  console.log(classAssignments);\n  const [grade, setGrade] = useState([]);\n  const fetchGrades = async (studentId, classId) => {\n    try {\n      const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      if (!res.ok) {\n        throw new Error(`Error: ${res.status}`);\n      }\n      const grade = await res.json();\n      return grade;\n    } catch (error) {\n      console.error(\"Failed to fetch student grade:\", error);\n    }\n  };\n  useEffect(() => {\n    const fetchAndSetGrades = async () => {\n      const grades = await Promise.all(studentDetails.map(student => fetchGrades(student.universityId, classTitleId[1])));\n      setGrade(grades);\n    };\n    fetchAndSetGrades();\n  }, [studentDetails, classTitleId]);\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => {\n    if (Array.isArray(student)) {\n      const s = student[0];\n      const studentId = s.universityId;\n      return {\n        id: index,\n        studentID: studentId,\n        studentName: s.name,\n        classID: classId,\n        className: classTitle,\n        semester: \"fall2022\",\n        finalGrade: \"\"\n      };\n    } else {\n      return {\n        id: index,\n        studentID: \"loading...\",\n        studentName: \"loading...\",\n        classID: classId,\n        className: classTitle,\n        semester: \"fall2022\",\n        finalGrade: \"Unknown\"\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Test, \"gNcLfm1znGe8e9289xYp6Kqc0N8=\");\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["Box","DataGrid","MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","useState","useEffect","columns","field","headerName","width","Test","studentDetails","classTitleId","classAssignments","console","log","grade","setGrade","fetchGrades","studentId","classId","res","fetch","method","headers","ok","Error","status","json","error","fetchAndSetGrades","grades","Promise","all","map","student","universityId","classTitle","rows","index","Array","isArray","s","id","studentID","studentName","name","classID","className","semester","finalGrade","height"],"sources":["/Users/jiasonghuang/Desktop/cs519_diagnostic/diagnostic-test-Yuckly/src/components/Test.tsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\nimport { IUniversityClass,IStudentDetail,IClassAssignment,IStudentGrade } from \"../types/api_types\";\nimport { useState, useEffect } from \"react\"; \n\ninterface TestProps {\n  studentDetails: IStudentDetail[];\n  classTitleId: string[];\n  classAssignments: IClassAssignment[];\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: \"studentID\",\n    headerName: \"Student ID\",\n  },\n  {\n    field: \"studentName\",\n    headerName: \"Student Name\",\n    width: 150,\n  },\n  {\n    field: \"classID\",\n    headerName: \"Class ID\",\n  },\n  {\n    field: \"className\",\n    headerName: \"Class Name\",\n  },\n  {\n    field: \"semester\",\n    headerName: \"Semester\",\n  },\n  {\n    field: \"finalGrade\",\n    headerName: \"Final Grade\",\n  },\n];\n\nexport const Test = ({ studentDetails, classTitleId, classAssignments }: TestProps) => {\n  console.log(classAssignments);\n  const [grade, setGrade] = useState<IStudentGrade[]>([]);\n\n  const fetchGrades = async (studentId:string, classId:string) => {\n    try {\n      const res = await fetch(\n        `${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`,\n        {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS(),\n        }\n      );\n      if (!res.ok) {\n        throw new Error(`Error: ${res.status}`);\n      }\n      const grade = await res.json();\n      return grade;\n    } catch (error) {\n      console.error(\"Failed to fetch student grade:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchAndSetGrades = async () => {\n      const grades = await Promise.all(\n        studentDetails.map((student) => fetchGrades(student.universityId, classTitleId[1]))\n      );\n      setGrade(grades);\n    };\n\n    fetchAndSetGrades();\n  }, [studentDetails, classTitleId]);\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => {\n    \n    if (Array.isArray(student)) {\n      const s = student[0];\n      const studentId = s.universityId;\n      return {\n        id: index,\n        studentID: studentId,\n        studentName: s.name,\n        classID: classId,\n        className: classTitle,\n        semester: \"fall2022\",\n        finalGrade:\"\",\n      };\n    } else {\n      return {\n        id: index,\n        studentID: \"loading...\",\n        studentName: \"loading...\",\n        classID: classId,\n        className: classTitle,\n        semester: \"fall2022\",\n        finalGrade: \"Unknown\",\n      };\n    }\n    \n    \n  });\n  return (\n    <Box sx={{ height: 400, width: \"100%\" }}>\n      <DataGrid rows={rows} columns={columns} pageSize={10} />\n    </Box>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}