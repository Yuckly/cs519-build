{"ast":null,"code":"var _jsxFileName = \"/Users/jiasonghuang/Desktop/deploy/cs519-diagnostic/src/components/GradeTable.tsx\";\nimport Box from \"@mui/material/Box\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"studentID\",\n  headerName: \"Student ID\"\n}, {\n  field: \"studentName\",\n  headerName: \"Student Name\",\n  width: 150\n}, {\n  field: \"classID\",\n  headerName: \"Class ID\"\n}, {\n  field: \"className\",\n  headerName: \"Class Name\"\n}, {\n  field: \"semester\",\n  headerName: \"Semester\"\n}, {\n  field: \"finalGrade\",\n  headerName: \"Final Grade\"\n}];\nexport const GradeTable = _ref => {\n  let {\n    studentGrades,\n    studentDetails,\n    classTitleId,\n    classAssignments\n  } = _ref;\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => {\n    if (Array.isArray(student)) {\n      const s = student[0];\n      const studentId = s.universityId;\n      const currStudentGrade = studentGrades.filter(s => s.studentId === studentId);\n      if (Array.isArray(currStudentGrade)) {\n        const s = currStudentGrade[0];\n        const unweightedGrade = s.grades[0];\n        const unweightedGradeKeys = Object.keys(unweightedGrade);\n        let weightedGrade = 0;\n        unweightedGradeKeys.forEach(a => {\n          const ass = classAssignments.find(assignment => assignment.assignmentId === a);\n          if (ass) {\n            const assignmentWeight = ass.weight;\n            const gradeValue = parseFloat(unweightedGrade[a]);\n            weightedGrade += assignmentWeight * gradeValue;\n          }\n        });\n        weightedGrade /= 100;\n        return {\n          id: uuidv4(),\n          studentID: studentId,\n          studentName: s.name,\n          classID: classId,\n          className: classTitle,\n          semester: \"fall2022\",\n          finalGrade: weightedGrade\n        };\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_c = GradeTable;\nvar _c;\n$RefreshReg$(_c, \"GradeTable\");","map":{"version":3,"names":["Box","DataGrid","v4","uuidv4","columns","field","headerName","width","GradeTable","studentGrades","studentDetails","classTitleId","classAssignments","classTitle","classId","rows","map","student","index","Array","isArray","s","studentId","universityId","currStudentGrade","filter","unweightedGrade","grades","unweightedGradeKeys","Object","keys","weightedGrade","forEach","a","ass","find","assignment","assignmentId","assignmentWeight","weight","gradeValue","parseFloat","id","studentID","studentName","name","classID","className","semester","finalGrade","height"],"sources":["/Users/jiasonghuang/Desktop/deploy/cs519-diagnostic/src/components/GradeTable.tsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport {\n  IStudentDetail,\n  IClassAssignment,\n  IStudentGrade,\n} from \"../types/api_types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface TestProps {\n  studentDetails: IStudentDetail[];\n  classTitleId: string[];\n  classAssignments: IClassAssignment[];\n  studentGrades: IStudentGrade[];\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: \"studentID\",\n    headerName: \"Student ID\",\n  },\n  {\n    field: \"studentName\",\n    headerName: \"Student Name\",\n    width: 150,\n  },\n  {\n    field: \"classID\",\n    headerName: \"Class ID\",\n  },\n  {\n    field: \"className\",\n    headerName: \"Class Name\",\n  },\n  {\n    field: \"semester\",\n    headerName: \"Semester\",\n  },\n  {\n    field: \"finalGrade\",\n    headerName: \"Final Grade\",\n  },\n];\n\nexport const GradeTable = ({\n  studentGrades,\n  studentDetails,\n  classTitleId,\n  classAssignments,\n}: TestProps) => {\n  const classTitle = classTitleId[0];\n  const classId = classTitleId[1];\n  const rows = studentDetails.map((student, index) => {\n    if (Array.isArray(student)) {\n      const s = student[0];\n      const studentId = s.universityId;\n\n      const currStudentGrade = studentGrades.filter(\n        (s) => s.studentId === studentId\n      );\n      if (Array.isArray(currStudentGrade)) {\n        const s = currStudentGrade[0];\n        const unweightedGrade = s.grades[0];\n        const unweightedGradeKeys = Object.keys(unweightedGrade);\n        let weightedGrade = 0;\n\n        unweightedGradeKeys.forEach((a) => {\n          const ass = classAssignments.find(\n            (assignment) => assignment.assignmentId === a\n          );\n          if (ass) {\n            const assignmentWeight = ass.weight;\n            const gradeValue = parseFloat(unweightedGrade[a]);\n            weightedGrade += assignmentWeight * gradeValue;\n          }\n        });\n\n        weightedGrade /= 100;\n        return {\n          id: uuidv4(),\n          studentID: studentId,\n          studentName: s.name,\n          classID: classId,\n          className: classTitle,\n          semester: \"fall2022\",\n          finalGrade: weightedGrade,\n        };\n      }\n    }\n  });\n  return (\n    <Box sx={{ height: 400, width: \"100%\" }}>\n      <DataGrid rows={rows} columns={columns} pageSize={10} />\n    </Box>\n  );\n};\n"],"mappings":";AAAA,OAAOA,GAAG,MAAM,mBAAmB;AACnC,SAASC,QAAQ,QAAoB,kBAAkB;AAMvD,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC;AASpC,MAAMC,OAAqB,GAAG,CAC5B;EACEC,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,aAAa;EACpBC,UAAU,EAAE,cAAc;EAC1BC,KAAK,EAAE;AACT,CAAC,EACD;EACEF,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,WAAW;EAClBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,UAAU;EACjBC,UAAU,EAAE;AACd,CAAC,EACD;EACED,KAAK,EAAE,YAAY;EACnBC,UAAU,EAAE;AACd,CAAC,CACF;AAED,OAAO,MAAME,UAAU,GAAG,QAKT;EAAA,IALU;IACzBC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC;EACS,CAAC;EACV,MAAMC,UAAU,GAAGF,YAAY,CAAC,CAAC,CAAC;EAClC,MAAMG,OAAO,GAAGH,YAAY,CAAC,CAAC,CAAC;EAC/B,MAAMI,IAAI,GAAGL,cAAc,CAACM,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;IAClD,IAAIC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;MAC1B,MAAMI,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC;MACpB,MAAMK,SAAS,GAAGD,CAAC,CAACE,YAAY;MAEhC,MAAMC,gBAAgB,GAAGf,aAAa,CAACgB,MAAM,CAC1CJ,CAAC,IAAKA,CAAC,CAACC,SAAS,KAAKA,SAAS,CACjC;MACD,IAAIH,KAAK,CAACC,OAAO,CAACI,gBAAgB,CAAC,EAAE;QACnC,MAAMH,CAAC,GAAGG,gBAAgB,CAAC,CAAC,CAAC;QAC7B,MAAME,eAAe,GAAGL,CAAC,CAACM,MAAM,CAAC,CAAC,CAAC;QACnC,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAI,CAACJ,eAAe,CAAC;QACxD,IAAIK,aAAa,GAAG,CAAC;QAErBH,mBAAmB,CAACI,OAAO,CAAEC,CAAC,IAAK;UACjC,MAAMC,GAAG,GAAGtB,gBAAgB,CAACuB,IAAI,CAC9BC,UAAU,IAAKA,UAAU,CAACC,YAAY,KAAKJ,CAAC,CAC9C;UACD,IAAIC,GAAG,EAAE;YACP,MAAMI,gBAAgB,GAAGJ,GAAG,CAACK,MAAM;YACnC,MAAMC,UAAU,GAAGC,UAAU,CAACf,eAAe,CAACO,CAAC,CAAC,CAAC;YACjDF,aAAa,IAAIO,gBAAgB,GAAGE,UAAU;UAChD;QACF,CAAC,CAAC;QAEFT,aAAa,IAAI,GAAG;QACpB,OAAO;UACLW,EAAE,EAAEvC,MAAM,EAAE;UACZwC,SAAS,EAAErB,SAAS;UACpBsB,WAAW,EAAEvB,CAAC,CAACwB,IAAI;UACnBC,OAAO,EAAEhC,OAAO;UAChBiC,SAAS,EAAElC,UAAU;UACrBmC,QAAQ,EAAE,UAAU;UACpBC,UAAU,EAAElB;QACd,CAAC;MACH;IACF;EACF,CAAC,CAAC;EACF,oBACE,QAAC,GAAG;IAAC,EAAE,EAAE;MAAEmB,MAAM,EAAE,GAAG;MAAE3C,KAAK,EAAE;IAAO,CAAE;IAAA,uBACtC,QAAC,QAAQ;MAAC,IAAI,EAAEQ,IAAK;MAAC,OAAO,EAAEX,OAAQ;MAAC,QAAQ,EAAE;IAAG;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACpD;AAEV,CAAC;AAAC,KAnDWI,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}